JavaScript

    学习目标：  1. 具备基本的编程思维能力  2. 能够使用编程的方式解决相关逻辑性的问题。


    学习路径：

         1. 基础语法（ECMASCRIPT）【6天】

         2. DOM + BOM 【6天】

         3. Jquery【框架】

         4. JS高级

         5. 服务端编程


☞ 什么JavaScript?【js】

          1. 历史发展：

              解决：用户在网页中的动作交互信息。

          2. 概念：  基于对象和事件驱动，运行在浏览器客户端的脚本语言。

              ✔ js的运行环境： 在浏览器端 （内置了js引擎）

              ✔ 对象： 在js中任何一个具体的事物 （万事万物皆对象）

                   三要素：
                       ✔ 继承

                       ✔ 封装

                       ✔ 多肽

              ✔ 事件驱动： 在网页中用户的任何一个动作对会对应一个事件


          3. JS的作用：

              ✔ nodeJS   ----》 实现服务端软件的开发

              ✔ 游戏开发   ----> js + Cavas【HTML标签】

              ✔ 网页特效  ----》 js 

              ✔ 地理定位功能  ---->js




☞ 开始学习JS

    ✔ 组成：   

         1.  基本语法（ECMASCRIPT） 

         2. DOM 【通过js的方式操作页面中的标签】  

         3. BOM【通过js的方式操作浏览器中的效果】


    ✔ 怎么写JS?

        ✔ 新建一个js文件   例如:  test.js

        ✔ 在网页中使用JS文件

             1. 通过外联式的方式使用

                通过script标签将JS文件引入到当前页面中

                例如：  <script src="01test.js"></script>


             2. 通过内嵌式的方法使用js【内嵌式写法不需要新建js文件】

                 通过在网页中添加<script>标签，在script标签中写对应的JS代码

                 例如：
                 <script>
                    js代码
                 </script>


              3. 通过行内式的方式写js

                 将js代码直接写到HTML标签身上。

                 例如：

                 <!-- <p 事件名称='js代码'></p> -->
                 <p onclick="alert(1)">asdfadsfasdf</p>

        注意： 

            1. js文件不能单独运行，依赖于HTML文件

            2. 外联式写法中不能再写js代码


    ✔ js中输出消息的方式

        1.alert()  

        2.document.write()   --- 在网页中直接输出信息,还可以在网页中设置具体的html标签
        
            例如： document.write('<h1>你好，世界</h1>');


        3.console.log()   ---> 在浏览器的控制台中输出消息

             作用： 为了调试代码使用。

        4.prompt('请输入您的用户名');   ----> 接收用户输入信息方法

        5.confirm('确定要睡觉么?');   ----> 让用户选择是确定还是取消


        
        注意：
             1. 在js中是严格区分字母大小写

             2. 在一段js代码结束后，以 ';'结尾。

             3. 在以上5个方法中只要输出信息，就要设置一个双引号或者单引号


    ✔ 变量（重点）：  变量就是一个用来存储临时数据的一个容器

          
           ☞ 定义一个变量

              var  自定义变量名;

           ☞ 给变量赋值

               变量名 = 值;


           ☞ 变量的另外一种设置方式：

              例如：  var  username = '张三';

              或者：  var username = '展示', pwd = '123';


           总结：

              1.  一个变量一次只能保存一个值

              2. 变量中保存的值是最后一次的赋值结果


           变量的命名规范总结：

               1. 不能使用关键字定义变量（var）: 关键字就是在js中具体特殊含义或者功能的单词

               2. 不建议使用和对象中属性冲突的名字作为变量（name不建议作为变量）

               3. 不能使用保留字定义变量： 保留字就是在当前js中，不具有特殊的含义，但是是留给将来的版本中作为特殊含义去使用 

               4. 变量名中间不能出现空格

               5. 不能使用数字开头定义变量

               6. 不能使用特殊符号开头定义变量

               7. 不建议使用汉字定义变量

           注意：
               
               1. '='符号不是用来判断相等的，是用来赋值的  ---> 赋值运算符

               2. 赋值运算符先执行'=' 右侧的代码，将右侧的代码赋值给左侧的变量

               3. 如果输出的是一个变量，变量不需要带引号


    ✔ 数据类型：通过数据类型要明确当前值在内存中的具体存储位置。

          ☞ 简单数据类型

                1. 字符串类型（string）

                    特点：只要变量的值使用了单引号或者双引号，那么当前变量的数据类型就是 字符串类型。
                    
                    例如：
                      var  a = '123';
        
                      var b = "123";


                     注意：
                         1. 如果是字符串相加，那么程序不会进行数学意义上的加法运算，只会简单的拼接到一块
                     
                     
                2. 数字类型 (number)

                     特点：只要变量的值是数字（正数，负数，小数，整数），那么该变量的数据类型就是数字类型。

                     注意：
                         
                          如果是数字类型的变量相加，那么最后的结果就是通过数学运算后的计算结果。


                3. 布尔类型 (boolean)


                     特点：如果变量的值是 true 或者 false,那么该变量的数据类型就是布尔类型

                     ☞ true :  代表正确的（条件满足）

                     ☞ false : 代表错误的（条件不满足）



                4. undefined类型

                     ✔ 如果一个变量没有赋值，那么该变量的默认值就是undefined

                     ✔ 如果一个变量的值是undefined，那么该变量的数据类型就是undefined类型。

                

                5. 获取当前变量的数据类型：

                     typeof（变量）
          
          ☞ 复杂数据类型


          ☞ 数据类型转换：      

                1. 转换为数字类型

                    ✔ 通过Number()转换

                     例如：  变量 =  Nmber(变量);
                     

                    ✔ 通过parseInt()转化为数字类型，转化后，只会保留整数部分，小数部分直接省略。


                    ✔ 通过parseFloat()转为数字类型，转化后，会保留小数部分


                    ✔ NaN: not  a  number


                
                2. 转化为字符串类型

                    ✔ 变量.toString();

                    ✔ String(变量);

                    ✔ 区别：

                         1. String可以将任何的数据类型转换为字符串类型

                         2.  .toString() 无法将 undefined 转化为字符串类型
                          
                3. 转化为布尔类型

                   Boolean(变量);

                   总结：
                       1. 0  NaN   undefined , 空字符串 转换为布尔类型后都是false


                  因为在内存中，布尔类型的结果其实 就是  1  和 0 
                      

                 总结：

                      1. 如果通过Number进行数据类型转换，遇到非数字的值，会转化为 NaN

                      2. 如果通过parseFloat进行数据类型转换，遇到非数字的值，直接保留小数部分


     
              


             

              