☞回顾：
     1. js组成：  基本语法   DOM(通过js操作网页)   BOM（通过js操作浏览器）

     2. 书写位置： 外联式， 内嵌式， 行内式

     3. 变量： 容器     （定义变量    给变量赋值）   变量：一个值（最后一次的赋值结果）

     4. 字符串类型      数字类型      布尔类型      undefined 类型 

     5. typeof(变量)

     6.   Number()   parseInt()   parseFloat()


          变量.toString()    String()

          Boolean()
          
☞字符串中的转义字符（了解）

      \   转义字符

      \n\r  转义字符 (回车换行效果)


☞数字类型中的最大取值范围（了解）

     最大值： Number.MAX_VALUE


     最小值：  Number.MIN_VALUE


☞判断一个值是不是数字，不能通过数据类型判断，通过 isNaN()判断
    
     isNaN(变量) :   如果得到的结果是true，那么代表当前值不是数字

                     如果得到的结果是false,那么代表当前值是数字


☞算数运算符

     +

     -

     * 

     /

     %: 取余（获取余数）

    ()： 计算过程中如果有（） ,先计算（）中的值。

    总结：

         1. 以上算数运算符如果在操作数字类型的时候，得到的结果就是数字类型

         2. 如果有字符串相加，那么得到的结果就是一个字符串（加号 起到是一个连接的作用，拼接字符串使用加号）

         3. 如果是字符串形式的数字类型相减，得到的结果是一个数字（发生了隐式类型转换）

         4. 如果是非数字类型相减，得到的结果是 NaN

         5. 如果除数是0,那么得到的结果是Infinity（无穷大）,对应的数据类型是数字类型


☞赋值运算符: 将一个值赋值给另外一个变量

      '=' : 用来赋值的，不是用来判断相等的。

      += :  例如：  a+=b;   ====>   a =  a+b;

      -= :  

      *= :  

      /= :


☞ 一元运算符：

      ++

        具体写法：

              a++
              ++a


      --    

         a--

         --a



     总结：
         1. 一元运算每次是对变量自己进行加1或者减一运算

         2. 如果一个变量单独执行  ++a 或者  a++ ，最后的结果都是给变量a 加1

         3.  ++a 和 a++ 的区别：

               ✔ 如果将这两个值 （a++） 和  （++a） 赋值给一个新的变量，那么这个变量的值是有区别的。


               ✔ 如果 将a++赋值给变量b ,那么变量b的值等于 a加1之前的值【先赋值后计算】

               ✔ 如果 将++a赋值给变量b，那么变量b的值等于a 加1之后的值【先计算后赋值】

               ✔ 不管 是 a++ 还是 ++a , 变量a永远都要加1
     
☞比较运算符
     
     >

     <

     >= :  大于或等于  a >= b 【a 要么大于 b  | 要么 a等于b】      2 >= 2

     <= :  小于或等于


     '==' : 判断值是否相等，不考虑数据类型。

     '===' ： 全等于，既要判断值是否相等还要判断数据类型

      !=: 不等于，只考虑值是否不相等，不考虑数据类型

      !==： 全部等于，既要判断值又要判断数据类型


     总结：
          1. 通过比较运算符后得到的结果是一个布尔类型的结果。


☞逻辑运算符

    ||(或)：   或者【有一个条件满足就可以了】

    &&（且）： 并且【必须所有的条件都满足】

    !（非） : 取反


    总结：

         1. 在程序中如果需要多个条件联合使用，那么需要使用逻辑运算符。

         2. 一般情况下通过逻辑运算符得到的是一个布尔类型的结果


         3. 如果是 且运算

             true && false  ====》 false

             false && false  ===》 false

             true  && true  ====> true


         4. 如果是或运算


             true || false ===》 true


             false || false  ===》 false


             true || true  ===》 true


        5. 如果是非运算

              !true  ====》 false

              !false  ====> true






☞条件判断： 是能够写出一个具有一定逻辑性代码的一个语法结构

     语法：

        if( 条件表达式【要确定条件是否满足】 ) {

            逻辑代码（根据具体问题写的代码）

        }else {

            逻辑代码
        }

     执行过程：

         1. 先执行if中的条件表达式

         2. 如果条件表达式结果为true，那么程序只会执行 if 中的逻辑代码，else中的代码不执行

         3. 如果条件表达式结果为false，那么程序只会执行else中的逻辑代码，不会执行if中的逻辑代码。


☞ 三元表达式（三元运算符）：


      语法：

          条件表达式 ?  逻辑代码1 : 逻辑代码2;



      执行过程：

          1.  先执行条件表达式

          2.  如果条件表达式的结果是true，那么执行 逻辑代码1

          3. 如果条件表达式结果是false，那么执行逻辑代码2


       
       如果要通过条件判断去设置代码，那么可以使用三元表达式去替代。




☞ 多条件判断表达式语法结构：

   

      语法：

         if(条件表达式) {


         }else if(条件表达式) {


         }else if (条件表达式) {


         }else {

         }



        执行过程：
             
              1. 当前条件表达式如果满足，就执行当前{}中的代码，其他代码不执行

              2. 如果当前条件不满足，那么要依次判断剩下的条件是否满足，如果满足就执行当前{}中的代码，其他代码不执行


              3. 如果以上条件都不满足，那么就执行else中的代码
              







    
