☞ 今日重点：函数

    1. 为甚么要学函数？

        为了在写程序过程中，将重复的代码重复使用，需要将之前的代码进行一个打包（封装） ---- 函数。

    2. 如何使用函数将重复的代码封装？

         ✔ 函数的定义（声明）

           function  自定义函数名称() {

                逻辑代码
           }

           注意事项：
                1. 函数名称的命名规范（☞ 函数名一般以动词开始  ☞ 函数的命名要遵守小驼峰命名法（首字母要小写））

                2. 函数名之后必须写 ‘（）’， 中不是条件表达式,放的是一些参数（变量）


         ✔ 函数中的代码默认不会执行，需要通过函数的调用，才可以执行函数中的代码。

            调用函数：    函数名称();    -----> 执行函数中的代码

         ✔ 函数中的参数介绍

             ☞ 在函数的'()'放的就是函数的参数。

             ☞ 函数中的参数：将用户输入的值以变量的形式保存下来，并且传递到函数内部使用

             参数细节问题注意：
                    1. 函数中的参数名字可以完全自定义。

                    2. 函数可以有参数也以没有参数，如果要设置参数，那么参数的个数是不固定的。

                    3. 如果一个函数没有参数，那么将该函数称为： 无参函数

                    4. 如果一个函数有参数，那么给函数称为： 有参函数

                    5. 将函数名后面的参数称为 ： 形参（形式上的一种参数）

                    6. 函数中 形参的值 来自于 实参      （ 形参 =  实参）

                    7. 在调用函数的时候，函数名后面的值就是实参（实参和形参是一一对应的）
                  


        
         
         ✔ 函数中的返回值介绍
              
              ☞ 返回值： 将函数中的值交给函数外部使用

              注意事项：   

                  1. 函数内部定义的变量，在函数外部不能使用（是因为作用域的原因）
                  2. 函数中的返回值，需要在函数外部通过定义一个新的变量接收
                  3. return 后是什么值，在函数外部得到的就是什么样的值。
                  4. 函数中可以有返回值也可以没有
                  5. 在函数中只能写 一个 return, return后面的代码不再执行。
                  6. 数组可以作为函数的返回值
                  7. 函数也可以作为返回值（记住）
                  8. 在函数中如果return后没有写任何值，那么默认是undefined。
                  9. 函数还可以作为参数。

         
         
         ✔ arguments



         ✔ 通过字面量方式创建函数

         ✔ 匿名函数

         ✔ 自调用函数

         ✔ 作用域:  代码能够起作用的区域


                全局作用域：

                    ☞ 在函数外部的区域就是全局作用域，在全局作用域中定义的变量就是全局变量。 


                    ☞ 全局变量可以在任何地方访问


                局部作用域： 

                    ☞ 在函数内部形成的区域就是局部作用域，在局部作用域中定义的变量就是局部变量

                    ☞ 局部变量只能在局部作用域中使用


         ✔ 作用域链： 将多个作用域链接到一块形成的一个链状结构。

                 如果在当前作用域中没有找到对应的值，那么程序就会按照作用域形成的链条一级一级的向上找。

        
         ✔ 代码预解析






